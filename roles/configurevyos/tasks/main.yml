---

- name: Get public key
  shell: |
    pub=$( cat "{{ prop_local_user_ssh_pub }}" )
    IFS=' '
    read -a array <<< "$pub"
    echo "{ \"key\": \"${array[1]}\", \"type\": \"${array[0]}\" }"
  register: expectresult
  args:
    executable: /bin/bash
  connection: local
  become: false

# - name: Print return information from the previous task
#   ansible.builtin.debug:
#     var: expectresult
#     verbosity: 2

- name: Set public key in fact
  ansible.builtin.set_fact:
    arg_pub_key: "{{ expectresult.stdout | from_json }}"
  connection: local
  become: false

# - name: Print return information from the previous task
#   ansible.builtin.debug:
#     var: arg_pub_key
#     verbosity: 2

- name: Template expect file
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ prop_admin_username }}"
    group: "{{ prop_admin_groupname }}"
    mode: '0644'
  loop:
    - src: wait.started.expect.j2
      dest: "~/wait.started.{{ prop_proxmox_vmid }}.expect"
    - src: reset.config.expect.j2
      dest: "~/reset.config.{{ prop_proxmox_vmid }}.expect"
    - src: first.logon.expect.j2
      dest: "~/first.logon.{{ prop_proxmox_vmid }}.expect"
    - src: add.user.expect.j2
      dest: "~/add.user.{{ prop_proxmox_vmid }}.expect"
    - src: auto.logon.expect.j2
      dest: "~/auto.logon.{{ prop_proxmox_vmid }}.expect"
    - src: config.api.expect.j2
      dest: "~/config.api.{{ prop_proxmox_vmid }}.expect"
    - src: config.network.expect.j2
      dest: "~/config.network.{{ prop_proxmox_vmid }}.expect"
    - src: config.network.interfaces.expect.j2
      dest: "~/config.network.interfaces.{{ prop_proxmox_vmid }}.expect"
    - src: config.network.routes.expect.j2
      dest: "~/config.network.routes.{{ prop_proxmox_vmid }}.expect"
    - src: config.network.dhcp.expect.j2
      dest: "~/config.network.dhcp.{{ prop_proxmox_vmid }}.expect"
    - src: config.network.dns.expect.j2
      dest: "~/config.network.dns.{{ prop_proxmox_vmid }}.expect"
    - src: register.dhcp.clients.expect.j2
      dest: "~/register.dhcp.clients.{{ prop_proxmox_vmid }}.expect"
    - src: register.dns.clients.expect.j2
      dest: "~/register.dns.clients.{{ prop_proxmox_vmid }}.expect"
    - src: generate.csr.expect.j2
      dest: "~/generate.csr.{{ prop_proxmox_vmid }}.expect"
    - src: config.host.cer1.expect.j2
      dest: "~/config.host.cer1.{{ prop_proxmox_vmid }}.expect"
    - src: config.host.cer2.expect.j2
      dest: "~/config.host.cer2.{{ prop_proxmox_vmid }}.expect"
  vars:
    ansible_connection: ssh
    ansible_host: "{{ prop_proxmox_host }}"
  become: true

- name: Execute expect script - wait started
  shell: |
    expect "~/wait.started.{{ prop_proxmox_vmid }}.expect"
    echo "CHANGED"
  register: expectresult
  changed_when: '"Changed" in expectresult.stdout'
  failed_when: '("Error" in expectresult.stdout) or ("Host key verification failed." in expectresult.stdout)'
  vars:
    ansible_connection: ssh
    ansible_host: "{{ prop_proxmox_host }}"
  become: true

- name: Execute expect script - reset config
  shell: |
    expect "~/reset.config.{{ prop_proxmox_vmid }}.expect"
    echo "CHANGED"
  register: expectresult
  changed_when: '"Changed" in expectresult.stdout'
  failed_when: '("Error" in expectresult.stdout) or ("Host key verification failed." in expectresult.stdout)'
  vars:
    ansible_connection: ssh
    ansible_host: "{{ prop_proxmox_host }}"
  become: true

- ansible.builtin.include_role: # reboot vm
    name: alex.proxmox.rebootvm

- name: Execute expect script - wait started
  shell: |
    expect "~/wait.started.{{ prop_proxmox_vmid }}.expect"
    echo "CHANGED"
  register: expectresult
  changed_when: '"Changed" in expectresult.stdout'
  failed_when: '("Error" in expectresult.stdout) or ("Host key verification failed." in expectresult.stdout)'
  vars:
    ansible_connection: ssh
    ansible_host: "{{ prop_proxmox_host }}"
  become: true

- name: Execute expect script - first logon
  shell: |
    expect "~/first.logon.{{ prop_proxmox_vmid }}.expect"
    echo "CHANGED"
  register: expectresult
  changed_when: '"Changed" in expectresult.stdout'
  failed_when: '("Error" in expectresult.stdout) or ("Host key verification failed." in expectresult.stdout)'
  vars:
    ansible_connection: ssh
    ansible_host: "{{ prop_proxmox_host }}"
  become: true

- name: Execute expect script - add user
  shell: |
    expect "~/add.user.{{ prop_proxmox_vmid }}.expect"
    echo "CHANGED"
  register: expectresult
  changed_when: '"Changed" in expectresult.stdout'
  failed_when: '("Error" in expectresult.stdout) or ("Host key verification failed." in expectresult.stdout)'
  vars:
    ansible_connection: ssh
    ansible_host: "{{ prop_proxmox_host }}"
  become: true

- name: Execute expect script - auto logon
  shell: |
    expect "~/auto.logon.{{ prop_proxmox_vmid }}.expect"
    echo "CHANGED"
  register: expectresult
  changed_when: '"Changed" in expectresult.stdout'
  failed_when: '("Error" in expectresult.stdout) or ("Host key verification failed." in expectresult.stdout)'
  vars:
    ansible_connection: ssh
    ansible_host: "{{ prop_proxmox_host }}"
  become: true

- name: Execute expect script - config network
  shell: |
    expect "~/config.network.{{ prop_proxmox_vmid }}.expect"
    echo "CHANGED"
  register: expectresult
  changed_when: '"Changed" in expectresult.stdout'
  failed_when: '("Error" in expectresult.stdout) or ("Host key verification failed." in expectresult.stdout)'
  vars:
    ansible_connection: ssh
    ansible_host: "{{ prop_proxmox_host }}"
  become: true

- name: Execute expect script - config network interfaces
  shell: |
    expect "~/config.network.interfaces.{{ prop_proxmox_vmid }}.expect"
    echo "CHANGED"
  register: expectresult
  changed_when: '"Changed" in expectresult.stdout'
  failed_when: '("Error" in expectresult.stdout) or ("Host key verification failed." in expectresult.stdout)'
  vars:
    ansible_connection: ssh
    ansible_host: "{{ prop_proxmox_host }}"
  become: true

- name: Execute expect script - config network routes
  shell: |
    expect "~/config.network.routes.{{ prop_proxmox_vmid }}.expect"
    echo "CHANGED"
  register: expectresult
  changed_when: '"Changed" in expectresult.stdout'
  failed_when: '("Error" in expectresult.stdout) or ("Host key verification failed." in expectresult.stdout)'
  vars:
    ansible_connection: ssh
    ansible_host: "{{ prop_proxmox_host }}"
  become: true

- name: Execute expect script - config network dhcp
  shell: |
    expect "~/config.network.dhcp.{{ prop_proxmox_vmid }}.expect"
    echo "CHANGED"
  register: expectresult
  changed_when: '"Changed" in expectresult.stdout'
  failed_when: '("Error" in expectresult.stdout) or ("Host key verification failed." in expectresult.stdout)'
  vars:
    ansible_connection: ssh
    ansible_host: "{{ prop_proxmox_host }}"
  become: true

- name: Execute expect script - config network dns
  shell: |
    expect "~/config.network.dns.{{ prop_proxmox_vmid }}.expect"
    echo "CHANGED"
  register: expectresult
  changed_when: '"Changed" in expectresult.stdout'
  failed_when: '("Error" in expectresult.stdout) or ("Host key verification failed." in expectresult.stdout)'
  vars:
    ansible_connection: ssh
    ansible_host: "{{ prop_proxmox_host }}"
  become: true

- name: Execute expect script - generate csr
  shell: |
    expect "~/generate.csr.{{ prop_proxmox_vmid }}.expect" > ~/host.csr
    echo "CHANGED"
  register: expectresult
  async: 300
  poll: 15
  changed_when: '"Changed" in expectresult.stdout'
  failed_when: '("Error" in expectresult.stdout) or ("Host key verification failed." in expectresult.stdout)'
  vars:
    ansible_connection: ssh
    ansible_host: "{{ prop_proxmox_host }}"
  become: true

# - name: Filter csr
#   shell: |
#     tail ~/host.csr -n 20 | head -n 17 > host.csr
#   vars:
#     ansible_connection: ssh
#     ansible_host: "{{ prop_proxmox_host }}"
#   become: true

- name: Copy CSR
  ansible.builtin.fetch:
    src: "~/host.csr"
    dest: "/tmp/{{ prop_hostname }}.csr"
    flat: yes
  vars:
    ansible_connection: ssh
    ansible_host: "{{ prop_proxmox_host }}"
  become: true

- name: Sign certificate
  shell: |
    openssl ca -in /tmp/{{ prop_hostname }}.csr -out /tmp/{{ prop_hostname }}.cer -config "{{ prop_certificates_sources }}/openssl/openssl.cnf" -batch -create_serial -notext
  args:
    executable: /bin/bash
  connection: local
  become: true

- name: Copy certificate
  copy:
    src: "/tmp/{{ prop_hostname }}.cer"
    dest: "~/host.cer"
    owner: root
    group: root
    mode: 0755
  vars:
    ansible_connection: ssh
    ansible_host: "{{ prop_proxmox_host }}"
  become: true

- name: Execute script
  shell: |
    cat ~/config.host.cer1.{{ prop_proxmox_vmid }}.expect > ~/config.host.cer.expect
    echo "expect \"\$username@*\"" >> ~/config.host.cer.expect
    echo "send -- \"> \\~/host.cer\\r\"" >> ~/config.host.cer.expect
    echo "" >> ~/config.host.cer.expect
    cat ~/host.cer | while read LINE; do
      echo "expect \"\$username@*\"" >> ~/config.host.cer.expect
      echo -n "send -- \"" >> ~/config.host.cer.expect
      echo -n "echo \\\"" >> ~/config.host.cer.expect
      echo -n "$LINE" >> ~/config.host.cer.expect
      echo "\\\" >> \\~/host.cer\\r\"" >> ~/config.host.cer.expect
      echo "" >> ~/config.host.cer.expect
    done
    cat ~/config.host.cer2.{{ prop_proxmox_vmid }}.expect >> ~/config.host.cer.expect
  args:
    executable: /bin/bash
  vars:
    ansible_connection: ssh
    ansible_host: "{{ prop_proxmox_host }}"
  become: true

- name: Execute expect script - config host certificate
  shell: |
    expect "~/config.host.cer.expect"
    echo "CHANGED"
  register: expectresult
  changed_when: '"Changed" in expectresult.stdout'
  failed_when: '("Error" in expectresult.stdout) or ("Host key verification failed." in expectresult.stdout)'
  vars:
    ansible_connection: ssh
    ansible_host: "{{ prop_proxmox_host }}"
  become: true


- name: Execute expect script - config http api
  shell: |
    expect "~/config.api.{{ prop_proxmox_vmid }}.expect"
    echo "CHANGED"
  register: expectresult
  changed_when: '"Changed" in expectresult.stdout'
  failed_when: '("Error" in expectresult.stdout) or ("Host key verification failed." in expectresult.stdout)'
  vars:
    ansible_connection: ssh
    ansible_host: "{{ prop_proxmox_host }}"
  become: true

- name: Execute expect script - register dhcp clients
  shell: |
    expect "~/register.dhcp.clients.{{ prop_proxmox_vmid }}.expect"
    echo "[$?]"
    # if [[ "$?" == "0" ]] ; then
    #   echo "CHANGED"
    # else
    #   echo "ERROR"
    # fi
  register: expectresult
  # async: 3000
  # poll: 15
  changed_when: '"Changed" in expectresult.stdout'
  failed_when: '("Error" in expectresult.stdout) or ("Host key verification failed." in expectresult.stdout)'
  vars:
    ansible_connection: ssh
    ansible_host: "{{ prop_proxmox_host }}"
  become: true

- name: Execute expect script - register dns clients
  shell: |
    expect "~/register.dns.clients.{{ prop_proxmox_vmid }}.expect"
    if [[ "$?" == "0" ]] ; echo "CHANGED" ; else ; echo "ERROR" ; fi
  register: expectresult
  async: 3000
  poll: 15
  changed_when: '"Changed" in expectresult.stdout'
  failed_when: '("Error" in expectresult.stdout) or ("Host key verification failed." in expectresult.stdout)'
  vars:
    ansible_connection: ssh
    ansible_host: "{{ prop_proxmox_host }}"
  become: true

- name: Delete expect files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "~/wait.started.{{ prop_proxmox_vmid }}.expect"
    - "~/reset.config.{{ prop_proxmox_vmid }}.expect"
    - "~/first.logon.{{ prop_proxmox_vmid }}.expect"
    - "~/add.user.{{ prop_proxmox_vmid }}.expect"
    - "~/auto.logon.{{ prop_proxmox_vmid }}.expect"
    - "~/config.api.{{ prop_proxmox_vmid }}.expect"
    - "~/config.network.{{ prop_proxmox_vmid }}.expect"
    - "~/config.network.interfaces.{{ prop_proxmox_vmid }}.expect"
    - "~/config.network.routes.{{ prop_proxmox_vmid }}.expect"
    - "~/config.network.dhcp.{{ prop_proxmox_vmid }}.expect"
    - "~/config.network.dns.{{ prop_proxmox_vmid }}.expect"
    - "~/register.dhcp.clients.{{ prop_proxmox_vmid }}.expect"
    - "~/register.dns.clients.{{ prop_proxmox_vmid }}.expect"
    - "~/generate.csr.{{ prop_proxmox_vmid }}.expect"
    - "~/config.host.cer1.{{ prop_proxmox_vmid }}.expect"
    - "~/config.host.cer2.{{ prop_proxmox_vmid }}.expect"
    - "~/config.host.cer.expect"
    - "~/host.cer"
    - "~/host.csr"
    - "./host.csr"
  vars:
    ansible_connection: ssh
    ansible_host: "{{ prop_proxmox_host }}"
  become: true

- ansible.builtin.include_role: # knownoshost
    name: alex.base.knownoshost
